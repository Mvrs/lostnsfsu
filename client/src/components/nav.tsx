import React from 'react'
import { Link, withRouter, RouteComponentProps } from 'react-router-dom'
import { connect, useDispatch, useSelector } from 'react-redux'
import { RootState } from '../redux/root-reducer'
import { bindActionCreators, Dispatch } from 'redux'
import { UserState } from '../redux/user/types'
import { userLogout } from '../redux/user/actions'

const Nav: React.FC<RouteComponentProps & UserState> = ({ ...props }) => {
  const loginState = useSelector((state: RootState) => state.users)

  console.log('login state: ', loginState)

  const dispatch = useDispatch()

  const handleLogout = async (event: React.FormEvent) => {
    event.preventDefault()
    await dispatch(userLogout())
    await props.history.push('/')
  }

  const userLinks = (
    // <nav className="flex flex-row items-center mt-10">
    //   <div>
    //     <img
    //       src={require('../assets/images/lostnsfsu-logo.png')}
    //       alt="main-logo"
    //     />
    //   </div>
    //   <ul className="flex flex-row">
    //     <Link to="/">Home</Link>
    //     <Link to="/register">Register</Link>

    //     <Link to="/" onClick={handleLogout}>
    //       Logout
    //     </Link>
    //   </ul>
    // </nav>
    <></>
  )
  const guestLinks = (
    <nav className="flex flex-row items-center pt-10 font-body">
      <div className="flex flex-grow">
        <svg
          width="147"
          height="30"
          viewBox="0 0 147 30"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <g clip-path="url(#clip0)">
            <path
              d="M29.0711 5.63539L38.8111 13.7044C39.2808 14.0936 39.2808 14.7245 38.8111 15.1136L37.6751 16.0547C37.2061 16.4432 36.4461 16.444 35.976 16.0564L28.2206 9.66157L20.4652 16.0564C19.9951 16.444 19.2351 16.4433 18.7661 16.0548L17.6301 15.1137C17.1604 14.7245 17.1604 14.0936 17.6301 13.7044L27.3701 5.63543C27.8398 5.24627 28.6014 5.24627 29.0711 5.63539Z"
              fill="white"
            />
          </g>
          <path
            d="M29.375 9.53609V10.2569C29.375 10.7244 29.6879 11.1292 30.1349 11.255C33.4658 12.1919 35.9063 15.2676 35.9063 18.9231C35.9063 23.3231 32.3701 26.8846 28 26.8846C23.6306 26.8846 20.0938 23.3238 20.0938 18.9231C20.0938 15.2681 22.5338 12.192 25.865 11.255C26.3121 11.1292 26.625 10.7243 26.625 10.2568V9.53644C26.625 8.85672 25.9876 8.36155 25.334 8.53112C20.7212 9.7276 17.3177 13.956 17.3439 18.9807C17.3748 24.9109 22.1339 29.6663 28.023 29.6538C33.8977 29.6414 38.6563 24.8418 38.6563 18.9231C38.6563 13.9197 35.2557 9.71631 30.655 8.52826C30.0057 8.3606 29.375 8.86109 29.375 9.53609Z"
            fill="white"
          />
          <path
            d="M28 9.69232C25.3269 9.69232 23.16 12.0686 23.16 15C23.16 17.9314 25.3269 20.3077 28 20.3077C30.6731 20.3077 32.84 17.9314 32.84 15C32.84 12.0686 30.6731 9.69232 28 9.69232ZM29.5613 15C29.5613 15.9441 28.8609 16.7122 28 16.7122C27.1391 16.7122 26.4387 15.9441 26.4387 15C26.4387 14.0559 27.1391 13.2879 28 13.2879C28.8609 13.2879 29.5613 14.0559 29.5613 15Z"
            fill="white"
          />
          <path
            d="M2.26172 27V9.86719H5.0625V24.5977H12.3164V27H2.26172Z"
            fill="white"
          />
          <path
            d="M54.1406 21.3477C54.1406 22.8711 53.5898 24.0664 52.4883 24.9336C51.3867 25.8008 49.8672 26.2344 47.9297 26.2344C45.9922 26.2344 44.4062 25.9336 43.1719 25.332V22.6836C43.9531 23.0508 44.7812 23.3398 45.6562 23.5508C46.5391 23.7617 47.3594 23.8672 48.1172 23.8672C49.2266 23.8672 50.043 23.6562 50.5664 23.2344C51.0977 22.8125 51.3633 22.2461 51.3633 21.5352C51.3633 20.8945 51.1211 20.3516 50.6367 19.9062C50.1523 19.4609 49.1523 18.9336 47.6367 18.3242C46.0742 17.6914 44.9727 16.9688 44.332 16.1562C43.6914 15.3438 43.3711 14.3672 43.3711 13.2266C43.3711 11.7969 43.8789 10.6719 44.8945 9.85156C45.9102 9.03125 47.2734 8.62109 48.9844 8.62109C50.625 8.62109 52.2578 8.98047 53.8828 9.69922L52.9922 11.9844C51.4688 11.3438 50.1094 11.0234 48.9141 11.0234C48.0078 11.0234 47.3203 11.2227 46.8516 11.6211C46.3828 12.0117 46.1484 12.5312 46.1484 13.1797C46.1484 13.625 46.2422 14.0078 46.4297 14.3281C46.6172 14.6406 46.9258 14.9375 47.3555 15.2188C47.7852 15.5 48.5586 15.8711 49.6758 16.332C50.9336 16.8555 51.8555 17.3438 52.4414 17.7969C53.0273 18.25 53.457 18.7617 53.7305 19.332C54.0039 19.9023 54.1406 20.5742 54.1406 21.3477ZM63.375 26H60.5742V11.2695H55.5352V8.86719H68.4141V11.2695H63.375V26ZM85.3242 26H81.8906L73.4648 12.3477H73.3711L73.4297 13.1094C73.5391 14.5625 73.5938 15.8906 73.5938 17.0938V26H71.0508V8.86719H74.4492L82.8516 22.4492H82.9219C82.9062 22.2695 82.875 21.6172 82.8281 20.4922C82.7812 19.3594 82.7578 18.4766 82.7578 17.8438V8.86719H85.3242V26ZM99.7266 21.3477C99.7266 22.8711 99.1758 24.0664 98.0742 24.9336C96.9727 25.8008 95.4531 26.2344 93.5156 26.2344C91.5781 26.2344 89.9922 25.9336 88.7578 25.332V22.6836C89.5391 23.0508 90.3672 23.3398 91.2422 23.5508C92.125 23.7617 92.9453 23.8672 93.7031 23.8672C94.8125 23.8672 95.6289 23.6562 96.1523 23.2344C96.6836 22.8125 96.9492 22.2461 96.9492 21.5352C96.9492 20.8945 96.707 20.3516 96.2227 19.9062C95.7383 19.4609 94.7383 18.9336 93.2227 18.3242C91.6602 17.6914 90.5586 16.9688 89.918 16.1562C89.2773 15.3438 88.957 14.3672 88.957 13.2266C88.957 11.7969 89.4648 10.6719 90.4805 9.85156C91.4961 9.03125 92.8594 8.62109 94.5703 8.62109C96.2109 8.62109 97.8438 8.98047 99.4688 9.69922L98.5781 11.9844C97.0547 11.3438 95.6953 11.0234 94.5 11.0234C93.5938 11.0234 92.9062 11.2227 92.4375 11.6211C91.9688 12.0117 91.7344 12.5312 91.7344 13.1797C91.7344 13.625 91.8281 14.0078 92.0156 14.3281C92.2031 14.6406 92.5117 14.9375 92.9414 15.2188C93.3711 15.5 94.1445 15.8711 95.2617 16.332C96.5195 16.8555 97.4414 17.3438 98.0273 17.7969C98.6133 18.25 99.043 18.7617 99.3164 19.332C99.5898 19.9023 99.7266 20.5742 99.7266 21.3477ZM105.82 26H103.043V8.86719H112.711V11.2344H105.82V16.5898H112.277V18.9688H105.82V26ZM125.695 21.3477C125.695 22.8711 125.145 24.0664 124.043 24.9336C122.941 25.8008 121.422 26.2344 119.484 26.2344C117.547 26.2344 115.961 25.9336 114.727 25.332V22.6836C115.508 23.0508 116.336 23.3398 117.211 23.5508C118.094 23.7617 118.914 23.8672 119.672 23.8672C120.781 23.8672 121.598 23.6562 122.121 23.2344C122.652 22.8125 122.918 22.2461 122.918 21.5352C122.918 20.8945 122.676 20.3516 122.191 19.9062C121.707 19.4609 120.707 18.9336 119.191 18.3242C117.629 17.6914 116.527 16.9688 115.887 16.1562C115.246 15.3438 114.926 14.3672 114.926 13.2266C114.926 11.7969 115.434 10.6719 116.449 9.85156C117.465 9.03125 118.828 8.62109 120.539 8.62109C122.18 8.62109 123.812 8.98047 125.438 9.69922L124.547 11.9844C123.023 11.3438 121.664 11.0234 120.469 11.0234C119.562 11.0234 118.875 11.2227 118.406 11.6211C117.938 12.0117 117.703 12.5312 117.703 13.1797C117.703 13.625 117.797 14.0078 117.984 14.3281C118.172 14.6406 118.48 14.9375 118.91 15.2188C119.34 15.5 120.113 15.8711 121.23 16.332C122.488 16.8555 123.41 17.3438 123.996 17.7969C124.582 18.25 125.012 18.7617 125.285 19.332C125.559 19.9023 125.695 20.5742 125.695 21.3477ZM142.441 8.86719V19.9531C142.441 21.2188 142.168 22.3281 141.621 23.2812C141.082 24.2266 140.297 24.957 139.266 25.4727C138.242 25.9805 137.016 26.2344 135.586 26.2344C133.461 26.2344 131.809 25.6719 130.629 24.5469C129.449 23.4219 128.859 21.875 128.859 19.9062V8.86719H131.672V19.707C131.672 21.1211 132 22.1641 132.656 22.8359C133.312 23.5078 134.32 23.8438 135.68 23.8438C138.32 23.8438 139.641 22.457 139.641 19.6836V8.86719H142.441Z"
            fill="white"
          />
          <defs>
            <clipPath id="clip0">
              <rect
                width="22"
                height="22.1538"
                fill="white"
                transform="translate(17)"
              />
            </clipPath>
          </defs>
        </svg>
      </div>

      <div className="flex items-end">
        <ul className="flex flex-grow-0">
          <li className="px-4 text-white text-lg font-medium">
            <Link to="/">About</Link>
          </li>
          <li className="px-4 text-white text-lg font-medium">
            <Link to="/">More Information</Link>
          </li>
          <li className="px-4 text-white text-lg font-medium">
            <Link to="/">Rent</Link>
          </li>
          <li className="px-4 text-white text-lg font-medium">
            <Link to="/register">Sign up</Link>
          </li>
          <li className="px-4 text-white text-lg font-medium">
            <Link to="/login">Sign in</Link>
          </li>
        </ul>
      </div>
    </nav>
  )

  return (
    <div>
      {/* {props.isAuthenticated && props.token !== null ? userLinks : guestLinks} */}
      {guestLinks}
    </div>
  )
}

const mapDispatchToProps = (dispatch: Dispatch) => {
  return bindActionCreators(
    {
      userLogout,
    },
    dispatch,
  )
}

const mapStateToProps = ({ users }: RootState) => ({
  user: users.user?.student,
  token: users.token,
  isAuthenticated: users.isAuthenticated,
})
export default withRouter(
  connect(mapStateToProps, mapDispatchToProps)(Nav as any),
)
